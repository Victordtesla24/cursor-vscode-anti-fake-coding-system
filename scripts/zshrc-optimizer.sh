#!/bin/bash

# zshrc_optimizer.sh - Optimize and update ~/.zshrc configuration
# Usage: ./zshrc_optimizer.sh

set -euo pipefail

ZSHRC_FILE="$HOME/.zshrc"
BACKUP_FILE="$HOME/.zshrc.backup.$(date +%Y%m%d_%H%M%S)"

echo "🔧 Starting .zshrc optimization..."

# Create backup
cp "$ZSHRC_FILE" "$BACKUP_FILE"
echo "✅ Backup created: $BACKUP_FILE"

# Create optimized .zshrc
cat > "$ZSHRC_FILE" << 'EOF'
#!/usr/bin/env zsh
# Optimized .zshrc configuration
# Generated by zshrc_optimizer.sh

# Performance profiling (uncomment to debug startup time)
# zmodload zsh/zprof

# ==========================================
# PERFORMANCE OPTIMIZATIONS
# ==========================================

# Disable magic functions for faster startup
DISABLE_MAGIC_FUNCTIONS="true"

# Optimized completion initialization - only check cache once daily
autoload -Uz compinit
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
    compinit -d ~/.zcompdump
else
    compinit -C
fi

# ==========================================
# NVM CONFIGURATION (LAZY LOADING)
# ==========================================

export NVM_DIR="$HOME/.nvm"

# Lazy load NVM - only initialize when needed
nvm() {
    unfunction nvm
    [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
    [ -s "/opt/homebrew/opt/nvm/bash_completion" ] && \. "/opt/homebrew/opt/nvm/bash_completion"
    nvm "$@"
}

# Add node binaries to path without loading NVM
if [ -d "$NVM_DIR/versions/node" ]; then
    LATEST_NODE=$(ls "$NVM_DIR/versions/node" | tail -1)
    if [ -n "$LATEST_NODE" ]; then
        export PATH="$NVM_DIR/versions/node/$LATEST_NODE/bin:$PATH"
    fi
fi

# ==========================================
# DOCKER COMPLETIONS
# ==========================================

# Docker CLI completions
if [[ -d /Users/vicd/.docker/completions ]]; then
    fpath=(/Users/vicd/.docker/completions $fpath)
fi

# ==========================================
# ENVIRONMENT VARIABLES
# ==========================================

# API Keys (ensure these are set in your environment securely)
# Source OPENAI_API_KEY from project .env file if it exists
if [[ -f "/Users/Shared/cursor/cursor-vscode-anti-fake-coding-system/.env" ]]; then
    source "/Users/Shared/cursor/cursor-vscode-anti-fake-coding-system/.env"
fi
export OPENAI_API_KEY="${OPENAI_API_KEY:-}"

# Node.js Performance Optimizations
export NODE_OPTIONS="--max-old-space-size=8192 --max-semi-space-size=512"
export UV_THREADPOOL_SIZE=16

# Electron Performance (macOS optimizations)
export ELECTRON_ENABLE_GPU=1
export ELECTRON_USE_METAL=1
export FORCE_COLOR=1

# Optimization flags
export CURSOR_AI_OPTIMIZED=1

# ==========================================
# SHELL OPTIONS
# ==========================================

# Enable extended globbing
setopt EXTENDED_GLOB

# History configuration
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt APPEND_HISTORY
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE

# ==========================================
# ALIASES & FUNCTIONS
# ==========================================

# Quick navigation
alias ..='cd ..'
alias ...='cd ../..'
alias l='ls -la'
alias ll='ls -alh'

# Git shortcuts
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'

# System utilities
alias reload='source ~/.zshrc'
alias zshconfig='nano ~/.zshrc'

# Performance monitoring function
shell_benchmark() {
    for i in $(seq 1 5); do
        /usr/bin/time zsh -i -c exit 2>&1 | grep real
    done
}

# ==========================================
# CONDITIONAL LOADING
# ==========================================

# Load additional configurations if they exist
[[ -f ~/.zsh_local ]] && source ~/.zsh_local
[[ -f ~/.zsh_aliases ]] && source ~/.zsh_aliases

# Performance profiling output (uncomment first line to enable)
# zprof

EOF

# Set appropriate permissions
chmod 644 "$ZSHRC_FILE"

echo "✅ .zshrc has been optimized!"
echo "📊 Performance improvements implemented:"
echo "   • NVM lazy loading to reduce startup time"
echo "   • Optimized completion caching"
echo "   • Removed duplicate environment variables"
echo "   • Added shell performance monitoring"
echo "   • Organized configuration into logical sections"
echo ""
echo "🔄 To apply changes, run: source ~/.zshrc"
echo "📈 To benchmark performance, run: shell_benchmark"
echo "🔍 To enable startup profiling, uncomment the zprof lines"
echo ""
echo "💾 Original configuration backed up to: $BACKUP_FILE"
